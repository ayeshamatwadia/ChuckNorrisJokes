{"version":3,"sources":["components/JokeText.js","components/JokeButton.js","components/JokeCard.js","containers/App.js","serviceWorker.js","index.js"],"names":["JokeText","props","className","joke","JokeButton","type","value","onClick","getNewJoke","JokeCard","getChuckNorrisJoke","fetch","then","response","json","jokeValue","setState","event","state","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qTAWeA,G,MARE,SAACC,GACd,OACI,yBAAKC,UAAU,iBACX,uBAAGA,UAAU,iBAAiBD,EAAME,SCMjCC,G,MATI,SAACH,GAChB,OACI,yBAAKC,UAAU,aACX,2BAAOA,UAAU,cAAcG,KAAK,SAASC,MAAM,SAASC,QAASN,EAAMO,gBCgCxEC,E,kDAhCb,aAAe,IAAD,8BACZ,gBAQFC,mBAAqB,WACnBC,MAAM,2CACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACT,GACL,IAAMY,EAAYZ,EAAKG,MACvB,EAAKU,SAAS,CAAEb,KAAMY,QAdZ,EAkBbP,WAAa,SAACS,GACb,EAAKP,sBAjBL,EAAKQ,MAAQ,CAACf,KAAM,IAFR,E,gEAMZgB,KAAKT,uB,+BAiBL,OACA,6BACI,kBAAC,EAAD,CAAUP,KAAMgB,KAAKD,MAAMf,OAC3B,kBAAC,EAAD,CAAYK,WAAYW,KAAKX,kB,GA5BdY,IAAMC,W,MCSdC,MATf,WACE,OACE,yBAAKpB,UAAU,OACb,iFACA,kBAAC,EAAD,QCIcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cac90232.chunk.js","sourcesContent":["import React from 'react';\r\nimport './JokeText.css';\r\n\r\nconst JokeText = (props) => {\r\n    return (\r\n        <div className=\"textContainer\">\r\n            <p className=\"chuckJokeText\">{props.joke}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JokeText;","import React from 'react';\r\nimport './JokeButton.css';\r\n\r\nconst JokeButton = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <input className=\"chuckButton\" type='button' value=\"button\" onClick={props.getNewJoke} />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default JokeButton;","import React from \"react\";\r\nimport JokeText from './JokeText';\r\nimport JokeButton from './JokeButton';\r\n\r\nclass JokeCard extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {joke: ''};\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getChuckNorrisJoke();\r\n  }\r\n\r\n  getChuckNorrisJoke = () => {\r\n    fetch(\"https://api.chucknorris.io/jokes/random\")\r\n    .then((response) => response.json())\r\n    .then((joke) => {\r\n      const jokeValue = joke.value\r\n      this.setState({ joke: jokeValue })\r\n    });\r\n  }\r\n\r\n   getNewJoke = (event) => {\r\n    this.getChuckNorrisJoke();\r\n   }\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n        <JokeText joke={this.state.joke}/>\r\n        <JokeButton getNewJoke={this.getNewJoke}/>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeCard;\r\n","import React from \"react\";\nimport JokeCard from \"../components/JokeCard\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to the Chuck Norris Random Joke Generator</h1>\n      <JokeCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}